{"version":3,"sources":["webpack:///./src/js/utils/detector.js","webpack:///./src/js/utils/preloadScene.js","webpack:///./src/js/main/components/renderer.js","webpack:///./src/js/main/components/camera.js","webpack:///./src/js/main/components/controls.js","webpack:///./src/js/main/generators/RoomGenerator.js","webpack:///./src/js/main/generators/FlatGenerator.js","webpack:///./src/js/main/managers/InputManager.js","webpack:///./src/js/main/managers/AvatarManager.js","webpack:///./src/js/main/Main.js","webpack:///./src/js/app.js"],"names":["Detector","canvas","document","createElement","window","WebGLRenderingContext","getContext","e","element","id","style","fontFamily","fontSize","fontWeight","textAlign","background","color","padding","width","margin","innerHTML","join","parameters","parent","undefined","body","this","getWebGLErrorMessage","appendChild","PreloadScene","_loading","getElementById","_saveStyle","_old_style","display","Renderer","config","scene","container","threeRenderer","THREE","antialias","setClearColor","fog","setPixelRatio","devicePixelRatio","domElement","shadowMap","enabled","type","maxAnisotropy","capabilities","getMaxAnisotropy","updateSize","outputEncoding","xr","VRButton","createButton","addEventListener","setSize","offsetWidth","offsetHeight","camera","render","Camera","renderer","height","threeCamera","fov","near","far","position","set","posX","posY","posZ","lookAt","aspect","updateProjectionMatrix","Controls","threeControls","OrbitControls","init","target","controls","x","y","z","autoRotate","autoRotateSpeed","rotateSpeed","zoomSpeed","minDistance","maxDistance","minPolarAngle","maxPolarAngle","enableDamping","enableZoom","dampingFactor","keys","LEFT","RIGHT","UP","BOTTOM","RoomGenerator","rooms","doors","walls","material","roomMeshes","_calcCenter","room","roomMesh","_generateShape","points","push","door","doorMesh","vertices","console","log","vectorArray","vertex","_transform","shape","extrudeSettings","amount","bevelEnabled","geometry","mesh","side","rotateX","Math","PI","planeVertices","_convertToVertices","floorGeometry","Float32Array","setAttribute","scale","bbox","_moveToCenter","_generateWallExtrude","wallShapeVector","Vector2","min","max","wallShape","wall_mesh","translateZ","_convertToVector","rotateY","translateX","cent","roomPoints","roomPoint","earcut","idx","_generatePlane","wall","setFromObject","getCenter","getSize","coord","FlatGenerator","_loadJSON","url","_sceneImporter","data","generate","flatObject","boundingBoxes","object","size","translate","translateY","computeBoundingBox","updateMatrixWorld","box1","boundingBox","clone","applyMatrix4","matrixWorld","add","sceneImporter","loader","generatorInstance","load","flat","_generateFlat","JSON","parse","replaceAll","xhr","loaded","total","err","error","main_instance","texture","_material","map","InputManager","keyMap","Map","addKey","keyCode","name","down","justPressed","setKeyFromKeyCode","pressed","keyName","get","keyState","setKey","Object","values","AvatarManager","avatar","forward","_moveSpeed","_turnSpeed","_avatar","_kForward","_walk","mixer","_mixer","_animations","_getAnimations","_fade_duration","_action","_action2","cube","_boundingBox","deltaTime","inputManager","fade_duration","delta_x","up","delta","left","right","distance","translateOnAxis","_startAnimation","box2","hit","intersectsBox","_stopAnimation","action","action2","update","animations","pointingAction","clipAction","gestureAction","startWalkAction","endWalkAction","walkAction","idleAction","avatar_animations","reset","setEffectiveTimeScale","setEffectiveWeight","fadeIn","play","fadeOut","Main","_container","_config","assign","minAzimuthAngle","Infinity","maxAzimuthAngle","animated","translate1","animatedCycle","animation","time","speed","isDev","_scene","createScene","_renderer","_camera","_controls","light","sceneElement","loadScene","_inputManager","_avatarManager","dpr","dt","Date","now","_lastframe","_animatedCycle","currentPhase","_animatedCyclePos","phaseDuration","_getDuration","delta_time","curr_msecs","_action_figure","_lastAnimationPhase","_getAnimation","length","requestAnimationFrame","bind","scene_url","toLowerCase","endsWith","_loadGLTF","_loadFBX","_loadVRM","_loadBVH","BVHLoader","result","skeletonHelper","skeleton","bones","boneContainer","_resizeObject","clip","_setMixer","GLTFLoader","gltf","VRM","from","then","vrm","meta","progress","config_translate","config_size","FBXLoader","visible","traverse","child","isMesh","castShadow","receiveShadow","processor","_processScene","_searchAnimations","gltf_scene","durations","duration","_fixObject","model","searchAnimations","children","forEach","clips","mroot","maxAxis","multiplyScalar","copy","_getAnimationName","detector","preloadScene","webgl","main","start","hideLoading","run","addGetWebGLMessage"],"mappings":"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","file":"0.app.js","sourcesContent":["export default class Detector {\r\n    webgl() {\r\n        try {\r\n            var canvas = document.createElement('canvas');\r\n\r\n            return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    getWebGLErrorMessage() {\r\n        var element = document.createElement('div');\r\n        element.id = 'webgl-error-message';\r\n        element.style.fontFamily = 'monospace';\r\n        element.style.fontSize = '13px';\r\n        element.style.fontWeight = 'normal';\r\n        element.style.textAlign = 'center';\r\n        element.style.background = '#fff';\r\n        element.style.color = '#000';\r\n        element.style.padding = '1.5em';\r\n        element.style.width = '400px';\r\n        element.style.margin = '5em auto 0';\r\n\r\n        element.innerHTML = window.WebGLRenderingContext ? [\r\n            'Your graphics card does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000000\">WebGL</a>.<br />',\r\n            'Find out how to get it <a href=\"http://get.webgl.org/\" style=\"color:#000000\">here</a>.'\r\n        ].join('\\n') : [\r\n            'Your browser does not seem to support <a href=\"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation\" style=\"color:#000000\">WebGL</a>.<br/>',\r\n            'Find out how to get it <a href=\"http://get.webgl.org/\" style=\"color:#000000\">here</a>.'\r\n        ].join('\\n');\r\n\r\n        return element;\r\n    };\r\n\r\n    addGetWebGLMessage(parameters) {\r\n        var parent, id, element;\r\n\r\n        parameters = parameters || {};\r\n\r\n        parent = parameters.parent !== undefined ? parameters.parent : document.body;\r\n        id = parameters.id !== undefined ? parameters.id : 'oldie';\r\n\r\n        element = this.getWebGLErrorMessage();\r\n        element.id = id;\r\n\r\n        parent.appendChild(element);\r\n    };\r\n}\r\n","export default class PreloadScene {\r\n    constructor(document) {\r\n        this._loading = document.getElementById('loading');\r\n        this._saveStyle();\r\n    }\r\n\r\n    _saveStyle() {\r\n        this._old_style = this._loading.style.display;\r\n    }\r\n\r\n    hideLoading() {\r\n        this._saveStyle();\r\n        this._loading.style.display = \"none\";\r\n    }\r\n\r\n    showLoading() {\r\n        this._loading.style.display = this._old_style;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\nimport { VRButton } from 'three/examples/jsm/webxr/VRButton';\r\nimport { XRControllerModelFactory  } from 'three/examples/jsm/webxr/XRControllerModelFactory';\r\n\r\n\r\n// Main webGL renderer class\r\nexport default class Renderer {\r\n  constructor(config, scene, container) {\r\n    // Properties\r\n    this.scene = scene;\r\n    this.container = container;\r\n\r\n    // Create WebGL renderer and set its antialias\r\n    this.threeRenderer = new THREE.WebGLRenderer({antialias: true});\r\n\r\n    // Set clear color to fog to enable fog or to hex color for no fog\r\n    this.threeRenderer.setClearColor(scene.fog.color);\r\n    this.threeRenderer.setPixelRatio(window.devicePixelRatio); // For retina\r\n\r\n    // Appends canvas\r\n    container.appendChild(this.threeRenderer.domElement);\r\n\r\n    // Shadow map options\r\n    this.threeRenderer.shadowMap.enabled = true;\r\n    this.threeRenderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    // Get anisotropy for textures\r\n    config.maxAnisotropy = this.threeRenderer.capabilities.getMaxAnisotropy();\r\n\r\n    // Initial size update set to canvas container\r\n    this.updateSize();\r\n\r\n    this.threeRenderer.outputEncoding = THREE.sRGBEncoding;\r\n    this.threeRenderer.xr.enabled = true;\r\n\r\n    // VR Button\r\n    document.body.appendChild( VRButton.createButton( this.threeRenderer ) );\r\n\r\n    // Listeners\r\n    document.addEventListener('DOMContentLoaded', () => this.updateSize(), false);\r\n    window.addEventListener('resize', () => this.updateSize(), false);\r\n  }\r\n\r\n  updateSize() {\r\n    this.threeRenderer.setSize(this.container.offsetWidth, this.container.offsetHeight);\r\n  }\r\n\r\n  render(scene, camera) {\r\n    // Renders scene to canvas target\r\n    this.threeRenderer.render(scene, camera);\r\n  }\r\n}\r\n","import * as THREE from 'three';\r\n\r\n// Class that creates and updates the main camera\r\nexport default class Camera {\r\n    constructor(config, renderer) {\r\n        const width = renderer.domElement.width;\r\n        const height = renderer.domElement.height;\r\n\r\n        // Create and position a Perspective Camera\r\n        this.threeCamera = new THREE.PerspectiveCamera(\r\n            config.camera.fov,\r\n            width / height,\r\n            config.camera.near,\r\n            config.camera.far\r\n        );\r\n\r\n        this.threeCamera.position.set(\r\n            config.camera.posX,\r\n            config.camera.posY,\r\n            config.camera.posZ\r\n        );\r\n\r\n        this.threeCamera.lookAt(0,0,0);\r\n\r\n        // Initial sizing\r\n        this.updateSize(renderer);\r\n\r\n        // Listeners\r\n        window.addEventListener('resize', () => this.updateSize(renderer), false);\r\n    }\r\n\r\n    updateSize(renderer) {\r\n        // Update camera aspect ratio with window aspect ratio\r\n        this.threeCamera.aspect = renderer.domElement.width / renderer.domElement.height;\r\n\r\n        // Always call updateProjectionMatrix on camera change\r\n        this.threeCamera.updateProjectionMatrix();\r\n    }\r\n}\r\n","import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\n// Controls based on orbit controls\r\nexport default class Controls {\r\n    constructor(config, camera, container) {\r\n        // Orbit controls first needs to pass in THREE to constructor\r\n        //const orbitControls = new OrbitControls(THREE);\r\n        this.threeControls = new OrbitControls(camera, container);\r\n\r\n        this.init(config);\r\n    }\r\n\r\n    init(config) {\r\n        this.threeControls.target.set(config.controls.target.x, config.controls.target.y, config.controls.target.z);\r\n        this.threeControls.autoRotate = config.controls.autoRotate;\r\n        this.threeControls.autoRotateSpeed = config.controls.autoRotateSpeed;\r\n        this.threeControls.rotateSpeed = config.controls.rotateSpeed;\r\n        this.threeControls.zoomSpeed = config.controls.zoomSpeed;\r\n        this.threeControls.minDistance = config.controls.minDistance;\r\n        this.threeControls.maxDistance = config.controls.maxDistance;\r\n        this.threeControls.minPolarAngle = config.controls.minPolarAngle;\r\n        this.threeControls.maxPolarAngle = config.controls.maxPolarAngle;\r\n        this.threeControls.enableDamping = config.controls.enableDamping;\r\n        this.threeControls.enableZoom = config.controls.enableZoom;\r\n        this.threeControls.dampingFactor = config.controls.dampingFactor;\r\n        this.threeControls.keys = { LEFT: 0, RIGHT: 0, UP: 0, BOTTOM: 0 }\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nimport earcut from 'earcut'\r\nimport {Vector2} from \"three\";\r\n\r\nexport default class RoomGenerator {\r\n\r\n  generate(rooms, doors, walls, material) {\r\n\r\n    const roomMeshes = [];\r\n\r\n    const room_center = this._calcCenter(rooms);\r\n\r\n    for (const room of rooms) {\r\n\r\n      const roomMesh = this._generateShape(room.points, 0.01, material);\r\n\r\n      roomMeshes.push(\r\n        roomMesh\r\n      );\r\n\r\n    }\r\n\r\n    for (const door of doors) {\r\n      const doorMesh = this._generateShape(door, -2.00, material);\r\n\r\n      roomMeshes.push(\r\n        doorMesh\r\n      );\r\n\r\n    }\r\n\r\n    return roomMeshes;\r\n  }\r\n\r\n  _generateShape(vertices, height, material) {\r\n\r\n    console.log(vertices);\r\n\r\n    const vectorArray = [];\r\n\r\n    for (const vertex of vertices) {\r\n      vectorArray.push(\r\n        new THREE.Vector2(\r\n          this._transform(vertex[0]),\r\n          this._transform(vertex[1])\r\n        )\r\n      )\r\n    }\r\n\r\n    const shape = new THREE.Shape(vectorArray);\r\n    const extrudeSettings = {amount: height, bevelEnabled: false};\r\n\r\n    const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n\r\n    const mesh = new THREE.Mesh(geometry,new THREE.MeshPhongMaterial({side: THREE.DoubleSide}));\r\n    mesh.rotateX(Math.PI / 2);\r\n\r\n    return mesh;\r\n\r\n  }\r\n\r\n  _calcCenter(rooms) {\r\n\r\n    for (const room of rooms) {\r\n      for (const point of room.points) {\r\n\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  generate2(rooms, walls) {\r\n\r\n\r\n    const planeVertices = this._convertToVertices(rooms);\r\n\r\n    const floorGeometry = new THREE.BufferGeometry();\r\n\r\n    const vertices = new Float32Array(planeVertices);\r\n\r\n    floorGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n    const material = new THREE.MeshBasicMaterial({color: 0xff0000, side: THREE.DoubleSide});\r\n    const mesh = new THREE.Mesh(floorGeometry, material);\r\n\r\n    const coeff = 0.01;\r\n\r\n    mesh.scale.set(\r\n      coeff, coeff, coeff\r\n    );\r\n\r\n    const bbox = this._moveToCenter(mesh)\r\n\r\n    const wall_mesh = this._generateWallExtrude(bbox);\r\n\r\n\r\n    return [mesh, wall_mesh];\r\n\r\n  }\r\n\r\n  _generateWallExtrude(bbox) {\r\n\r\n    const wallShapeVector = [];\r\n\r\n    wallShapeVector.push(\r\n      new Vector2(bbox.min.x, bbox.min.z)\r\n    );\r\n    wallShapeVector.push(\r\n      new Vector2(bbox.min.x, bbox.max.z)\r\n    );\r\n    wallShapeVector.push(\r\n      new Vector2(bbox.max.x, bbox.max.z)\r\n    );\r\n    wallShapeVector.push(\r\n      new Vector2(bbox.max.x, bbox.min.z)\r\n    );\r\n\r\n    const wallShape = new THREE.Shape(wallShapeVector);\r\n    const extrudeSettings = {amount: -2.60, bevelEnabled: false};\r\n\r\n    const geometry = new THREE.ExtrudeGeometry(wallShape, extrudeSettings);\r\n\r\n    const wall_mesh = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial({side: THREE.DoubleSide}));\r\n    wall_mesh.rotateX(Math.PI / 2);\r\n\r\n    wall_mesh.translateZ(-2);\r\n\r\n    return wall_mesh;\r\n  }\r\n\r\n  _generateWall() {\r\n\r\n    const wallShape = new THREE.Shape(this._convertToVector(walls));\r\n\r\n    const extrudeSettings = {amount: -260};\r\n\r\n    const geometry = new THREE.ExtrudeGeometry(wallShape, extrudeSettings);\r\n\r\n    const wall_mesh = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial({side: THREE.DoubleSide}));\r\n    wall_mesh.rotateY(Math.PI / 2);\r\n    const coeff = 0.01;\r\n\r\n    wall_mesh.scale.set(\r\n      coeff, coeff, coeff\r\n    );\r\n\r\n    wall_mesh.translateX(-cent.x);\r\n    wall_mesh.translateZ(-cent.z);\r\n\r\n    //this._moveToCenter(mesh);\r\n\r\n\r\n  }\r\n\r\n\r\n  _generatePlane(planeVertices, roomPoints) {\r\n\r\n    let vertices = [];\r\n\r\n    for (const roomPoint of roomPoints) {\r\n      vertices.push(roomPoint[0]);\r\n      vertices.push(roomPoint[1]);\r\n    }\r\n\r\n    //vertices = vertices.reverse();\r\n\r\n    //console.log(vertices);\r\n\r\n    const faces = earcut(vertices);\r\n\r\n    //console.log(faces);\r\n\r\n    for (const face of faces) {\r\n      const idx = face * 2;\r\n      const x = vertices[idx];\r\n      const y = 0;\r\n      const z = vertices[idx + 1];\r\n\r\n      planeVertices.push(\r\n        -z\r\n      );\r\n      planeVertices.push(\r\n        y\r\n      );\r\n      planeVertices.push(\r\n        x\r\n      );\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _convertToVertices(rooms) {\r\n    const planeVertices = [];\r\n    for (const room of rooms) {\r\n\r\n      const roomPoints = room.points;\r\n\r\n      this._generatePlane(\r\n        planeVertices, roomPoints\r\n      );\r\n\r\n    }\r\n    return planeVertices;\r\n  }\r\n\r\n  _convertToVector(walls) {\r\n    const vectorArray = [];\r\n\r\n    let idx = 5;\r\n\r\n    for (const wall of walls) {\r\n      vectorArray.push(\r\n        new THREE.Vector2(wall[0], wall[1])\r\n      );\r\n\r\n      if (idx++ > 8) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    console.log(vectorArray);\r\n\r\n    return vectorArray;\r\n  }\r\n\r\n  _moveToCenter(mesh) {\r\n    const bbox = new THREE.Box3().setFromObject(mesh);\r\n    const cent = bbox.getCenter(new THREE.Vector3());\r\n    const size = bbox.getSize(new THREE.Vector3());\r\n\r\n    console.log(bbox);\r\n    console.log(cent);\r\n\r\n    mesh.translateX(-cent.x);\r\n    mesh.translateZ(-cent.z);\r\n    return new THREE.Box3().setFromObject(mesh);\r\n\r\n  }\r\n\r\n  _transform(coord) {\r\n    return coord / 100;\r\n  }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nimport RoomGenerator from \"./RoomGenerator\";\r\n\r\nexport default class FlatGenerator {\r\n\r\n\r\n  constructor(config, scene) {\r\n    THREE.Cache.enabled = true;\r\n\r\n    //this._loadTexture(config, scene);\r\n\r\n    this._loadJSON(config.url, this._sceneImporter, config, scene);\r\n\r\n  }\r\n\r\n  _generateFlat(data, material) {\r\n\r\n    const roomGenerator = new RoomGenerator();\r\n    const roomMesh = roomGenerator.generate(\r\n      data['rooms'],\r\n      data['doors'],\r\n      data['external_walls'],\r\n      material\r\n    );\r\n\r\n    return roomMesh;\r\n\r\n  }\r\n\r\n  _sceneImporter(config, scene, flatObject) {\r\n\r\n    scene.boundingBoxes = [];\r\n\r\n    for (const object of flatObject) {\r\n      object.scale.set(config.size.x, config.size.y, config.size.z);\r\n      object.translateX(config.translate.x);\r\n      object.translateY(config.translate.y);\r\n      object.translateZ(config.translate.z);\r\n\r\n      object.geometry.computeBoundingBox();\r\n      object.updateMatrixWorld();\r\n\r\n      const box1 = object.geometry.boundingBox.clone();\r\n      box1.applyMatrix4(object.matrixWorld);\r\n\r\n      scene.boundingBoxes.push(box1);\r\n\r\n      scene.add(object);\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _loadJSON(url, sceneImporter, config, scene, material) {\r\n    const loader = new THREE.FileLoader();\r\n\r\n    const generatorInstance = this;\r\n\r\n    loader.load(\r\n      url,\r\n\r\n      function (data) {\r\n\r\n        const flat = generatorInstance._generateFlat(\r\n          JSON.parse(\r\n            data.replaceAll('\\'', '\\\"')\r\n          ),\r\n          material\r\n        );\r\n\r\n        sceneImporter(config, scene, flat);\r\n\r\n      },\r\n\r\n      function (xhr) {\r\n        console.log((xhr.loaded / xhr.total * 100) + '% loaded');\r\n      },\r\n\r\n      function (err) {\r\n        console.error('An error happened');\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  _loadTexture(config, scene) {\r\n\r\n    const main_instance = this;\r\n\r\n    const loader = new THREE.TextureLoader();\r\n\r\n// load a resource\r\n    loader.load(\r\n      // resource URL\r\n      'assets/textures/floor_tiles_06_diff_1k.png ',\r\n\r\n      // onLoad callback\r\n      function (texture) {\r\n        // in this example we create the material when the texture is loaded\r\n        main_instance._material = new THREE.MeshBasicMaterial({\r\n          map: texture, side: THREE.DoubleSide\r\n        });\r\n\r\n        main_instance._loadJSON(config.url, main_instance._sceneImporter, config, scene, main_instance._material);\r\n\r\n      },\r\n\r\n      // onProgress callback currently not supported\r\n      undefined,\r\n\r\n      // onError callback\r\n      function (err) {\r\n        console.error('An error happened.');\r\n      }\r\n    );\r\n  }\r\n}\r\n","// Keeps the state of keys/buttons\r\n//\r\n// You can check\r\n//\r\n//   inputManager.keys.left.down\r\n//\r\n// to see if the left key is currently held down\r\n// and you can check\r\n//\r\n//   inputManager.keys.left.justPressed\r\n//\r\n// To see if the left key was pressed this frame\r\n//\r\n// Keys are 'left', 'right', 'a', 'b', 'up', 'down'\r\nexport default class InputManager {\r\n  constructor() {\r\n    this.keys = {};\r\n    const keyMap = new Map();\r\n\r\n    const setKey = (keyName, pressed) => {\r\n      const keyState = this.keys[keyName];\r\n      keyState.justPressed = pressed && !keyState.down;\r\n      keyState.down = pressed;\r\n    };\r\n\r\n    const addKey = (keyCode, name) => {\r\n      this.keys[name] = { down: false, justPressed: false };\r\n      keyMap.set(keyCode, name);\r\n    };\r\n\r\n    const setKeyFromKeyCode = (keyCode, pressed) => {\r\n      const keyName = keyMap.get(keyCode);\r\n      if (!keyName) {\r\n        return;\r\n      }\r\n      setKey(keyName, pressed);\r\n    };\r\n\r\n    addKey(65, 'left');\r\n    addKey(68, 'right');\r\n    addKey(87, 'up');\r\n    addKey(83, 'down');\r\n    addKey(69, 'action');\r\n    addKey(32, 'action2');\r\n\r\n    window.addEventListener('keydown', (e) => {\r\n      setKeyFromKeyCode(e.keyCode, true);\r\n    });\r\n    window.addEventListener('keyup', (e) => {\r\n      setKeyFromKeyCode(e.keyCode, false);\r\n    });\r\n  }\r\n  update() {\r\n    for (const keyState of Object.values(this.keys)) {\r\n      if (keyState.justPressed) {\r\n        keyState.justPressed = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import * as THREE from \"three\";\r\n\r\nexport default class AvatarManager {\r\n\r\n\r\n  constructor(avatar, forward) {\r\n    this._moveSpeed = 0.03 / 60;\r\n    this._turnSpeed = 4;//this._moveSpeed / 4;\r\n    this._avatar = avatar.scene;\r\n    this._kForward = forward;\r\n\r\n    this._walk = false;\r\n\r\n    const mixer = new THREE.AnimationMixer(this._avatar);\r\n\r\n    this._mixer = mixer;\r\n\r\n    this._animations = this._getAnimations(this._mixer, avatar);\r\n\r\n    this._fade_duration = 0.4;\r\n\r\n    this._action = false;\r\n    this._action2 = false;\r\n\r\n    const bb_size = 0.5;\r\n\r\n    const geometry = new THREE.BoxGeometry(1, bb_size, 1);\r\n    const material = new THREE.MeshBasicMaterial({color: 0x00ff00});\r\n    const cube = new THREE.Mesh(geometry, material);\r\n\r\n    this._boundingBox = cube;\r\n\r\n  }\r\n\r\n  update(deltaTime, inputManager, boundingBoxes) {\r\n    let speed = this._moveSpeed\r\n    const avatar = this._avatar;\r\n\r\n    const fade_duration = this._fade_duration;\r\n\r\n    const delta_x = (inputManager.keys.up.down ? 1 : 0) +\r\n      (inputManager.keys.down.down ? -1 : 0);\r\n\r\n    const delta = (inputManager.keys.left.down ? 1 : 0) +\r\n      (inputManager.keys.right.down ? -1 : 0);\r\n\r\n    if (delta !== 0) {\r\n      avatar.rotateY(this._turnSpeed * delta * deltaTime);\r\n    }\r\n\r\n    if (delta_x !== 0) {\r\n\r\n      const distance = delta_x * deltaTime;\r\n\r\n      avatar.translateOnAxis(this._kForward, distance);\r\n      if (!this._walk) {\r\n        this._startAnimation('walk', fade_duration);\r\n        this._walk = true;\r\n      }\r\n\r\n      this._boundingBox.position.x = avatar.position.x;\r\n      this._boundingBox.position.y = 1.0;\r\n      this._boundingBox.position.z = avatar.position.z;\r\n\r\n      this._boundingBox.geometry.computeBoundingBox();\r\n      this._boundingBox.updateMatrixWorld();\r\n\r\n      const box2 = this._boundingBox.geometry.boundingBox.clone();\r\n      box2.applyMatrix4(this._boundingBox.matrixWorld);\r\n\r\n      let hit = false;\r\n\r\n      for (const boundingBox of boundingBoxes) {\r\n        if (boundingBox.intersectsBox(box2)) {\r\n          hit = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if(hit) {\r\n        avatar.translateOnAxis(this._kForward, -distance);\r\n      }\r\n    } else {\r\n      if (this._walk) {\r\n        this._stopAnimation('walk', fade_duration);\r\n        this._walk = false;\r\n      }\r\n    }\r\n\r\n    const action = inputManager.keys.action.down;\r\n\r\n    if (action) {\r\n      if (this._action !== true) {\r\n        this._startAnimation('pointing', fade_duration);\r\n        this._action = true;\r\n      }\r\n    } else {\r\n      if (this._action === true) {\r\n        this._stopAnimation('pointing', fade_duration);\r\n        this._action = false;\r\n      }\r\n    }\r\n\r\n    const action2 = inputManager.keys.action2.down;\r\n\r\n    if (action2) {\r\n      if (this._action2 !== true) {\r\n        this._startAnimation('gesture', fade_duration);\r\n        this._action2 = true;\r\n      }\r\n    } else {\r\n      if (this._action2 === true) {\r\n        this._stopAnimation('gesture', fade_duration);\r\n        this._action2 = false;\r\n      }\r\n    }\r\n\r\n    this._mixer.update(deltaTime);\r\n\r\n  }\r\n\r\n  _getAnimations(mixer, avatar) {\r\n\r\n    const animations = avatar.animations;\r\n\r\n    const pointingAction = mixer.clipAction(animations[6]);\r\n    const gestureAction = mixer.clipAction(animations[0]);\r\n    const startWalkAction = mixer.clipAction(animations[8]);\r\n    const endWalkAction = mixer.clipAction(animations[4]);\r\n    const walkAction = mixer.clipAction(animations[10]);\r\n    const idleAction = mixer.clipAction(animations[12]);\r\n\r\n    const avatar_animations = [];\r\n    avatar_animations['pointing'] = pointingAction;\r\n    avatar_animations['gesture'] = gestureAction;\r\n    avatar_animations['startWalk'] = startWalkAction;\r\n    avatar_animations['endWalk'] = endWalkAction;\r\n    avatar_animations['walk'] = walkAction;\r\n    avatar_animations['idle'] = idleAction;\r\n\r\n    return avatar_animations;\r\n  }\r\n\r\n  _startAnimation(action, fade_duration) {\r\n    this._animations[action].reset()\r\n      .setEffectiveTimeScale(1)\r\n      .setEffectiveWeight(1)\r\n      .fadeIn(fade_duration)\r\n      .play();\r\n  }\r\n\r\n  _stopAnimation(action, fade_duration) {\r\n    this._animations[action].fadeOut(fade_duration);\r\n  }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nimport Renderer from \"./components/renderer\";\r\nimport Camera from \"./components/camera\";\r\nimport Controls from \"./components/controls\";\r\n\r\nimport FlatGenerator from \"./generators/FlatGenerator\"\r\n\r\nimport InputManager from \"./managers/InputManager\";\r\nimport AvatarManager from \"./managers/AvatarManager\";\r\n\r\nimport {BoxLineGeometry} from 'three/examples/jsm/geometries/BoxLineGeometry.js';\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport {FBXLoader} from 'three/examples/jsm/loaders/FBXLoader.js';\r\nimport {BVHLoader} from 'three/examples/jsm/loaders/BVHLoader.js';\r\n\r\n\r\nimport {VRM} from '@pixiv/three-vrm';\r\n\r\n\r\nexport default class Main {\r\n\r\n  constructor(container, config = {}) {\r\n    this._container = container;\r\n    this._config = Object.assign({\r\n      fog: {\r\n        color: 0x505050,\r\n        near: 0.0008\r\n      },\r\n      camera: {\r\n        fov: 60,\r\n        near: 0.001,\r\n        far: 1000,\r\n        aspect: 1,\r\n        posX: 0,\r\n        posY: 1.8,\r\n        posZ: 10.2\r\n      },\r\n      controls: {\r\n        autoRotate: false,\r\n        autoRotateSpeed: -0.5,\r\n        rotateSpeed: 0.5,\r\n        zoomSpeed: 0.8,\r\n        minDistance: 0.01,\r\n        maxDistance: 600,\r\n        minPolarAngle: Math.PI / 5,\r\n        maxPolarAngle: Math.PI / 2,\r\n        minAzimuthAngle: -Infinity,\r\n        maxAzimuthAngle: Infinity,\r\n        enableDamping: true,\r\n        dampingFactor: 0.5,\r\n        enableZoom: true,\r\n        target: {\r\n          x: 0,\r\n          y: 1.8,\r\n          z: 0\r\n        }\r\n      },\r\n      scene: [\r\n        {\r\n          url: 'assets/interior/generated/test.json',\r\n          size: {\r\n            x: 1,\r\n            y: 1,\r\n            z: 1\r\n          },\r\n          translate: {\r\n            x: 0,\r\n            y: 0,\r\n            z: 0,\r\n          },\r\n          animated: false\r\n        },\r\n        {\r\n          url: 'assets/claudia/mixamo-1613450024492.glb',\r\n          size: {\r\n            x: 0.01,\r\n            y: 0.01,\r\n            z: 0.01\r\n          },\r\n          translate1: {\r\n            x: -6,\r\n            y: -0.55,\r\n            z: 6.5,\r\n          },\r\n          translate: {\r\n            x: 3,\r\n            y: -0.05,\r\n            z: 3.6,\r\n          },\r\n          avatar: true,\r\n          animated: false,\r\n          animatedCycle: [\r\n            {\r\n              animation: 'idle',\r\n              time: 2\r\n            },\r\n            {\r\n              animation: 'pointing'\r\n            },\r\n            {\r\n              speed: 0.2,\r\n              time: 20,\r\n              animation: 'walk'\r\n            },\r\n            {\r\n              animation: 'gesture'\r\n            }\r\n          ]\r\n        }],\r\n      isDev: true\r\n    }, config);\r\n\r\n    if (this._config.isDev) {\r\n      console.log(this._config);\r\n    }\r\n  }\r\n\r\n  start() {\r\n\r\n    const config = this._config;\r\n\r\n    this._scene = this.createScene(config);\r\n\r\n    const scene = this._scene;\r\n\r\n    this._renderer = new Renderer(config, scene, this._container);\r\n    this._camera = new Camera(config, this._renderer.threeRenderer);\r\n\r\n    this._controls = new Controls(config, this._camera.threeCamera, this._container);\r\n\r\n    const light = new THREE.AmbientLight(0x404040, 3); // soft white light\r\n    scene.add(light);\r\n\r\n    /*\r\n        const room = new THREE.LineSegments(\r\n            new BoxLineGeometry(6, 6, 6, 10, 10, 10),\r\n            new THREE.LineBasicMaterial({color: 0x800000})\r\n        );\r\n        room.geometry.translate(0, 3, 0);\r\n        scene.add(room);\r\n    */\r\n\r\n    for (const sceneElement of config.scene) {\r\n      this.loadScene(sceneElement, scene);\r\n    }\r\n\r\n    this._inputManager = new InputManager();\r\n    this._avatarManager = undefined;\r\n\r\n  }\r\n\r\n  run() {\r\n    this.render();\r\n  }\r\n\r\n  createScene(config) {\r\n    const scene = new THREE.Scene();\r\n\r\n    if (window.devicePixelRatio) {\r\n      config.dpr = window.devicePixelRatio;\r\n    }\r\n\r\n    scene.fog = new THREE.FogExp2(config.fog.color, config.fog.near);\r\n\r\n    return scene;\r\n  }\r\n\r\n  render() {\r\n\r\n    // Call render function and pass in created scene and camera\r\n    this._renderer.render(this._scene, this._camera.threeCamera);\r\n\r\n    this._controls.threeControls.update();\r\n\r\n    const dt = (Date.now() - this._lastframe) / 1000;\r\n\r\n    if (this._animatedCycle !== undefined) {\r\n\r\n      const currentPhase = this._animatedCycle[this._animatedCyclePos];\r\n\r\n      let phaseDuration = currentPhase.time;\r\n\r\n      if (phaseDuration === undefined) {\r\n        phaseDuration = this._getDuration();\r\n      }\r\n\r\n      const delta_time = phaseDuration * 1000;\r\n\r\n      const curr_msecs = Date.now();\r\n\r\n      if (currentPhase.speed !== undefined) {\r\n        const distance = dt * currentPhase.speed;\r\n        this._action_figure.translateZ(distance);\r\n      }\r\n\r\n      if (curr_msecs - this._lastAnimationPhase > delta_time) {\r\n\r\n        const fade_duration = 0.4;\r\n\r\n        //this._getAnimation().stop();\r\n        this._getAnimation().fadeOut(fade_duration);\r\n\r\n\r\n        this._animatedCyclePos = this._animatedCyclePos + 1;\r\n\r\n        if (this._animatedCyclePos > this._animatedCycle.length - 1) {\r\n          this._animatedCyclePos = 0;\r\n        }\r\n\r\n        this._lastAnimationPhase = curr_msecs;\r\n        this._getAnimation()\r\n          .reset()\r\n          .setEffectiveTimeScale(1)\r\n          .setEffectiveWeight(1)\r\n          .fadeIn(fade_duration)\r\n          .play();\r\n        console.log(this._animatedCyclePos);\r\n      }\r\n\r\n    }\r\n\r\n    if (this._mixer !== undefined) {\r\n      this._mixer.update(dt);\r\n    }\r\n\r\n    this._lastframe = Date.now();\r\n\r\n    this._inputManager.update();\r\n\r\n    if(this._avatarManager !== undefined) {\r\n      this._avatarManager.update(dt, this._inputManager, this._scene.boundingBoxes);\r\n    }\r\n\r\n    // RAF\r\n    requestAnimationFrame(this.render.bind(this)); // Bind the main class instead of window object\r\n  }\r\n\r\n  loadScene(config, scene) {\r\n    const scene_url = config.url.toLowerCase();\r\n\r\n    if (scene_url.endsWith('json')) {\r\n      const flatGenerator = new FlatGenerator(config, scene);\r\n    } else if (scene_url.endsWith('gltf') || scene_url.endsWith('glb')) {\r\n      this._loadGLTF(config, scene);\r\n    } else if (scene_url.endsWith('fbx')) {\r\n      this._loadFBX(config, scene);\r\n    } else if (scene_url.endsWith('vrm')) {\r\n      this._loadVRM(config, scene);\r\n    } else if (scene_url.endsWith('bvh')) {\r\n      this._loadBVH(config, scene);\r\n    } else {\r\n      console.log('Unknown format! ' + scene_url);\r\n    }\r\n  }\r\n\r\n  _loadBVH(config, scene) {\r\n\r\n    const main_instance = this;\r\n\r\n\r\n    const loader = new BVHLoader();\r\n    loader.load(config.scene.url, function (result) {\r\n\r\n      console.log(result);\r\n\r\n      const skeletonHelper = new THREE.SkeletonHelper(result.skeleton.bones[0]);\r\n      skeletonHelper.skeleton = result.skeleton; // allow animation mixer to bind to THREE.SkeletonHelper directly\r\n\r\n      const boneContainer = new THREE.Group();\r\n      boneContainer.add(result.skeleton.bones[0]);\r\n\r\n      scene.add(main_instance._resizeObject(config.scene.size, skeletonHelper));\r\n      scene.add(main_instance._resizeObject(config.scene.size, boneContainer));\r\n\r\n      // play animation\r\n      const mixer = new THREE.AnimationMixer(skeletonHelper);\r\n      mixer.clipAction(result.clip).setEffectiveWeight(1.0).play();\r\n\r\n      main_instance._setMixer(mixer);\r\n\r\n    });\r\n  }\r\n\r\n  _loadVRM(config, scene) {\r\n\r\n    const loader = new GLTFLoader();\r\n    loader.load(\r\n      // URL of the VRM you want to load\r\n      config.scene.url,\r\n\r\n      // called when the resource is loaded\r\n      (gltf) => {\r\n\r\n        // generate a VRM instance from gltf\r\n        VRM.from(gltf).then((vrm) => {\r\n\r\n          console.log(vrm.meta);\r\n\r\n          // add the loaded vrm to the scene\r\n          scene.add(vrm.scene);\r\n\r\n          // deal with vrm features\r\n          console.log(vrm);\r\n\r\n        });\r\n\r\n      },\r\n\r\n      // called while loading is progressing\r\n      (progress) => console.log('Loading model...', 100.0 * (progress.loaded / progress.total), '%'),\r\n\r\n      // called when loading has errors\r\n      (error) => console.error(error)\r\n    );\r\n\r\n  }\r\n\r\n  _fixObject(config_translate, object) {\r\n    object.translateX(config_translate.x);\r\n    object.translateY(config_translate.y);\r\n    object.translateZ(config_translate.z);\r\n    return object;\r\n  }\r\n\r\n  _resizeObject(config_size, object) {\r\n\r\n    const bbox = new THREE.Box3().setFromObject(object);\r\n    const size = bbox.getSize(new THREE.Vector3());\r\n\r\n    //Rescale the object to normalized space\r\n    const maxAxis = Math.max(size.x, size.y, size.z);\r\n    const maxSize = Math.max(config_size.x, config_size.y, config_size.z);\r\n\r\n    object.scale.set(config_size.x, config_size.y, config_size.z);\r\n\r\n    return object;\r\n\r\n  }\r\n\r\n  _loadFBX(config, scene) {\r\n    const loader = new FBXLoader();\r\n\r\n    const main_instance = this;\r\n\r\n    loader.load(config.scene.url, function (object) {\r\n\r\n\r\n      const skeleton = new THREE.SkeletonHelper(object);\r\n      skeleton.visible = true;\r\n      scene.add(skeleton);\r\n\r\n      const mixer = new THREE.AnimationMixer(object);\r\n\r\n      console.log(object.animations);\r\n\r\n      const action = mixer.clipAction(object.animations[0]);\r\n      action.play();\r\n\r\n      object.traverse(function (child) {\r\n\r\n        if (child.isMesh) {\r\n\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n\r\n        }\r\n\r\n      });\r\n\r\n      scene.add(\r\n        main_instance._resizeObject(\r\n          config.scene.size,\r\n          object\r\n        )\r\n      );\r\n\r\n      main_instance._setMixer(mixer);\r\n\r\n\r\n    });\r\n  }\r\n\r\n  _loadGLTF(config, scene) {\r\n    const loader = new GLTFLoader();\r\n    const processor = this._processScene;\r\n    const searchAnimations = this._searchAnimations;\r\n    const main_instance = this;\r\n\r\n    loader.load(config.url, function (gltf) {\r\n\r\n      const gltf_scene = processor(gltf.scene);\r\n\r\n      if (config.avatar) {\r\n        main_instance._avatarManager = new AvatarManager(gltf, new THREE.Vector3(0, 0, 1));\r\n      }\r\n\r\n\r\n      if (config.animated) {\r\n        const skeleton = new THREE.SkeletonHelper(gltf_scene);\r\n        skeleton.visible = false;\r\n        scene.add(skeleton);\r\n\r\n        //console.log(skeleton);\r\n\r\n        const mixer = new THREE.AnimationMixer(gltf.scene);\r\n\r\n        main_instance._mixer = mixer;\r\n\r\n        main_instance.bones = [];\r\n\r\n        const animations = gltf.animations;\r\n\r\n        console.log(animations);\r\n\r\n        const pointingAction = mixer.clipAction(animations[6]);\r\n        const gestureAction = mixer.clipAction(animations[0]);\r\n        const startWalkAction = mixer.clipAction(animations[8]);\r\n        const endWalkAction = mixer.clipAction(animations[4]);\r\n        const walkAction = mixer.clipAction(animations[10]);\r\n        const idleAction = mixer.clipAction(animations[12]);\r\n\r\n        main_instance.durations = [];\r\n        main_instance.durations['pointing'] = animations[6].duration;\r\n        main_instance.durations['gesture'] = animations[0].duration;\r\n        main_instance.durations['walk'] = animations[10].duration;\r\n        main_instance.durations['startWalk'] = animations[8].duration;\r\n        main_instance.durations['endWalk'] = animations[4].duration;\r\n        main_instance.durations['idle'] = animations[12].duration;\r\n\r\n        main_instance.animations = [];\r\n        main_instance.animations['pointing'] = pointingAction;\r\n        main_instance.animations['gesture'] = gestureAction;\r\n        main_instance.animations['startWalk'] = startWalkAction;\r\n        main_instance.animations['endWalk'] = endWalkAction;\r\n        main_instance.animations['walk'] = walkAction;\r\n        main_instance.animations['idle'] = idleAction;\r\n\r\n        //idleAction.setLoop(THREE.LoopPingPong);\r\n\r\n        //pointingAction.play();\r\n\r\n        const animatedCycle = config.animatedCycle;\r\n\r\n        if (animatedCycle !== undefined) {\r\n          main_instance._lastAnimationPhase = Date.now();\r\n          main_instance._animatedCycle = animatedCycle;\r\n          main_instance._animatedCyclePos = 0;\r\n\r\n          main_instance.animations[\r\n            animatedCycle[\r\n              main_instance._animatedCyclePos\r\n              ].animation\r\n            ].play();\r\n\r\n        }\r\n\r\n      }\r\n\r\n      main_instance._action_figure = main_instance._fixObject(\r\n        config.translate,\r\n        main_instance._resizeObject(\r\n          config.size,\r\n          gltf_scene\r\n        )\r\n      )\r\n\r\n\r\n      scene.add(\r\n        main_instance._action_figure\r\n      );\r\n\r\n\r\n    }, undefined, function (error) {\r\n\r\n      console.error(error);\r\n\r\n    });\r\n  }\r\n\r\n  _searchAnimations(model, searchAnimations = this._searchAnimations) {\r\n    if (model === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (model.children === undefined) {\r\n      return;\r\n    }\r\n\r\n    model.children.forEach(element => {\r\n      var clips = element.animations;\r\n      if (clips !== undefined) {\r\n        console.log(clips);\r\n      }\r\n\r\n      searchAnimations(element, searchAnimations);\r\n    });\r\n\r\n  }\r\n\r\n  _processScene(scene) {\r\n    const mroot = scene;\r\n    const bbox = new THREE.Box3().setFromObject(mroot);\r\n    const cent = bbox.getCenter(new THREE.Vector3());\r\n    const size = bbox.getSize(new THREE.Vector3());\r\n\r\n    //Rescale the object to normalized space\r\n    var maxAxis = Math.max(size.x, size.y, size.z);\r\n\r\n    mroot.scale.multiplyScalar(1.8 / maxAxis);\r\n    bbox.setFromObject(mroot);\r\n    bbox.getCenter(cent);\r\n    bbox.getSize(size);\r\n    //Reposition to 0,halfY,0\r\n    mroot.position.copy(cent).multiplyScalar(-1);\r\n    mroot.position.y += (size.y * 0.5);\r\n    return scene;\r\n  }\r\n\r\n  _setMixer(mixer) {\r\n    this._mixer = mixer;\r\n  }\r\n\r\n  _getAnimation() {\r\n    return this.animations[\r\n      this._getAnimationName()\r\n      ]\r\n  }\r\n\r\n  _getDuration() {\r\n    return this.durations[\r\n      this._getAnimationName()\r\n      ]\r\n  }\r\n\r\n  _getAnimationName() {\r\n    return this._animatedCycle[\r\n      this._animatedCyclePos\r\n      ].animation\r\n  }\r\n}\r\n","import Detector from \"./utils/detector.js\";\r\nimport PreloadScene from './utils/preloadScene.js';\r\nimport Main from './main/Main.js'\r\n\r\n\r\n// Styles\r\nimport './../css/app.scss';\r\n\r\nconsole.log('Start sequor.edu');\r\n\r\nconst detector = new Detector();\r\n\r\nconst preloadScene = new PreloadScene(document);\r\n\r\nif (detector.webgl()) {\r\n\r\n    const container = document.getElementById('appContainer');\r\n\r\n    const main = new Main(container);\r\n\r\n    main.start();\r\n\r\n    preloadScene.hideLoading();\r\n\r\n    main.run();\r\n\r\n} else {\r\n\r\n    preloadScene.hideLoading();\r\n\r\n    detector.addGetWebGLMessage(\r\n        {\r\n            parent: document.getElementById('appContainer'),\r\n            id: 'webgl-error'\r\n        }\r\n    );\r\n\r\n}\r\n"],"sourceRoot":""}